---
import ArticleImage from "./ArticleImage.astro";
import ArticleBlockquote from "./ArticleBlockquote.astro";

import {Content as PrefaceContent} from '../data/preface.md';

import * as text from '../data/text.md';

let compiledText = text.compiledContent().replaceAll(
    /(\s[a-zÄ…Ä‡Ä™Å‚Å„Ã³Å›ÅºÅ¼]+)(o)([a-zÄ…Ä‡Ä™Å‚Å„Ã³Å›ÅºÅ¼]+[\w.])/gu,
    "$1<span class='relative' data-text-extinction><span data-text-extinction-victim>$2</span><span data-text-extinction-zombie class='absolute select-none pointer-events-none top-0 left-1/2 -translate-x-2/4 grayscale opacity-0'>ğŸ«¥</span></span>$3"
)

import Image1 from '../assets/image1.png';
import Image2 from '../assets/image2.png';

---

<article id="wymieranie-internetu" class="container w-full max-w-screen-xl mx-auto font-serif py-8 lg:py-16 px-4 relative scroll-mt-[76px]">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-32">
        <div class="lg:col-span-2">
            <div class="prose dark:prose-invert font-sans opacity-70 text-sm lg:text-base uppercase mb-8 lg:mb-32">
                <PrefaceContent/>
            </div>
            <div class="prose dark:prose-invert text-xl lg:text-2xl">
                <Fragment set:html={compiledText} />
            </div>
        </div>
        <div class="flex flex-col items-center lg:items-end gap-2 lg:gap-8">
            <ArticleImage image={Image1} alt="alt" source="source"/>
            <ArticleImage
                    image={Image2}
                    alt="alt"
                    source="source"
            >
                <Fragment slot="translation">
                    are you asian or chinese?<br>
                    im chines but chinese is a type asian so<br>
                    you just came from china?<br>
                    no i was born insf<br>
                    si<br>
                    dope dope
                </Fragment>
            </ArticleImage>
        </div>
        <div class="lg:col-span-3">
            <ArticleBlockquote>
                czym nie da siÄ™ mÃ³wiÄ‡ o tym trzeba szlochaÄ‡. Sappho Bot â€” Blackcap; uczyÅ„my ciemnoÅ›Ä‡ znÃ³w widocznÄ… â€” egalitaryzm dla ciebie, elityzm dla mnie
                â€” potrzebujÄ™ przycisku odzobacz Å¼eby usunÄ…Ä‡ z mÃ³zgu tweety, ktÃ³re ostatnio widziaÅ‚em
                . Ben Grosser â€” czy uwaÅ¼am siebie za osobÄ™ wpÅ‚ywowÄ…. nie. chcÄ™ zrozumieÄ‡
                . Hannah Arendt â€” Jak to kurwa komputer bÄ™dzie mnie pytaÅ‚ czy jestem robotem, ty zjebie sam jesteÅ› robotem @briantheruller  â€” co da siÄ™ zmierzyÄ‡, tym da siÄ™ zarzÄ…dzaÄ‡. Simon Caulkin  â€” polecenie: przyÅ›lijcie klaunÃ³w
                â€”
                pamiÄ™tam zniszczenie
                â€”
                brechtowska maksyma: bierz przykÅ‚ad nie ze starych, dobrych rzeczy tylko z nowych, zÅ‚ych
                â€”
                juÅ¼ nie chodzi o socjalizm albo barbarzyÅ„stwo ale o dewzrost albo mad-max. Patrice Riemens
            </ArticleBlockquote>
        </div>
    </div>
</article>

<script>
    const observer = new IntersectionObserver(
        ((entries) => {
            console.log(entries)
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    let victim = entry.target.querySelector('[data-text-extinction-victim]');
                    if(victim) {
                        victim.classList.add('animate-fade-out');
                    }

                    let zombie = entry.target.querySelector('[data-text-extinction-zombie]');
                    if(zombie) {
                        zombie.classList.add('animate-fade-in');
                    }

                    return;
                }

                let victim = entry.target.querySelector('[data-text-extinction-victim]');
                if(victim) {
                    victim.classList.remove('animate-fade-out');
                }

                let zombie = entry.target.querySelector('[data-text-extinction-zombie]');
                if(zombie) {
                    zombie.classList.remove('animate-fade-in');
                }
            });
        }),
        {
            rootMargin: '0px',
            threshold: 0.5
        }
    );

    document.querySelectorAll('[data-text-extinction]').forEach((element) => {
        if (element) {
            observer.observe(element);
        }
    });
</script>

<script>
    import tippy from 'tippy.js';

    document.querySelectorAll('[data-footnote-ref]').forEach((footnoteElement) => {
        let footnoteId = footnoteElement.getAttribute('href');
        if(footnoteId === null){
            return;
        }

        footnoteElement.addEventListener("click", function(event){
            event.preventDefault()
        });

        let footnoteContent = document.getElementById(footnoteId.slice(1));
        if(footnoteContent === null){
            return;
        }

        let footnotePopoverContent = document.createElement('div');
        let footnotePopoverContentInner = document.createElement('div');
        footnotePopoverContentInner.innerHTML = footnoteContent.innerHTML;
        footnotePopoverContentInner.className = 'prose bg-light dark:bg-dark font-sans prose dark:prose-invert text-black/70 dark:text-white/70 text-base lg:text-lg rounded-md border border-dark/70 dark:border-light/70 py-3.5 px-5';
        footnotePopoverContent.innerHTML = footnotePopoverContentInner.outerHTML;

        let footnotePopoverContentBackReference = footnotePopoverContent.querySelector('a[data-footnote-backref]');
        if(footnotePopoverContentBackReference !== null) {
            footnotePopoverContentBackReference.remove();
        }

        tippy('#' + footnoteElement.id, {
            allowHTML: true,
            arrow: false,
            content: footnotePopoverContent.innerHTML,
            placement: 'right-start',
            trigger: 'click',
            interactive: true,
            appendTo: () => document.body
        });
    });
</script>
